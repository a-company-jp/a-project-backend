// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gQuery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"a-project-backend/gen/gModel"
)

func newMilestone(db *gorm.DB, opts ...gen.DOOption) milestone {
	_milestone := milestone{}

	_milestone.milestoneDo.UseDB(db, opts...)
	_milestone.milestoneDo.UseModel(&gModel.Milestone{})

	tableName := _milestone.milestoneDo.TableName()
	_milestone.ALL = field.NewAsterisk(tableName)
	_milestone.MilestoneID = field.NewString(tableName, "milestone_id")
	_milestone.UserID = field.NewString(tableName, "user_id")
	_milestone.Title = field.NewString(tableName, "title")
	_milestone.Content = field.NewString(tableName, "content")
	_milestone.ImageHash = field.NewString(tableName, "image_hash")
	_milestone.BeginDate = field.NewInt32(tableName, "begin_date")
	_milestone.FinishDate = field.NewInt32(tableName, "finish_date")

	_milestone.fillFieldMap()

	return _milestone
}

type milestone struct {
	milestoneDo

	ALL         field.Asterisk
	MilestoneID field.String
	UserID      field.String
	Title       field.String
	Content     field.String
	ImageHash   field.String
	BeginDate   field.Int32
	FinishDate  field.Int32

	fieldMap map[string]field.Expr
}

func (m milestone) Table(newTableName string) *milestone {
	m.milestoneDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m milestone) As(alias string) *milestone {
	m.milestoneDo.DO = *(m.milestoneDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *milestone) updateTableName(table string) *milestone {
	m.ALL = field.NewAsterisk(table)
	m.MilestoneID = field.NewString(table, "milestone_id")
	m.UserID = field.NewString(table, "user_id")
	m.Title = field.NewString(table, "title")
	m.Content = field.NewString(table, "content")
	m.ImageHash = field.NewString(table, "image_hash")
	m.BeginDate = field.NewInt32(table, "begin_date")
	m.FinishDate = field.NewInt32(table, "finish_date")

	m.fillFieldMap()

	return m
}

func (m *milestone) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *milestone) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["milestone_id"] = m.MilestoneID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["title"] = m.Title
	m.fieldMap["content"] = m.Content
	m.fieldMap["image_hash"] = m.ImageHash
	m.fieldMap["begin_date"] = m.BeginDate
	m.fieldMap["finish_date"] = m.FinishDate
}

func (m milestone) clone(db *gorm.DB) milestone {
	m.milestoneDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m milestone) replaceDB(db *gorm.DB) milestone {
	m.milestoneDo.ReplaceDB(db)
	return m
}

type milestoneDo struct{ gen.DO }

type IMilestoneDo interface {
	gen.SubQuery
	Debug() IMilestoneDo
	WithContext(ctx context.Context) IMilestoneDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMilestoneDo
	WriteDB() IMilestoneDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMilestoneDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMilestoneDo
	Not(conds ...gen.Condition) IMilestoneDo
	Or(conds ...gen.Condition) IMilestoneDo
	Select(conds ...field.Expr) IMilestoneDo
	Where(conds ...gen.Condition) IMilestoneDo
	Order(conds ...field.Expr) IMilestoneDo
	Distinct(cols ...field.Expr) IMilestoneDo
	Omit(cols ...field.Expr) IMilestoneDo
	Join(table schema.Tabler, on ...field.Expr) IMilestoneDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMilestoneDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMilestoneDo
	Group(cols ...field.Expr) IMilestoneDo
	Having(conds ...gen.Condition) IMilestoneDo
	Limit(limit int) IMilestoneDo
	Offset(offset int) IMilestoneDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMilestoneDo
	Unscoped() IMilestoneDo
	Create(values ...*gModel.Milestone) error
	CreateInBatches(values []*gModel.Milestone, batchSize int) error
	Save(values ...*gModel.Milestone) error
	First() (*gModel.Milestone, error)
	Take() (*gModel.Milestone, error)
	Last() (*gModel.Milestone, error)
	Find() ([]*gModel.Milestone, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gModel.Milestone, err error)
	FindInBatches(result *[]*gModel.Milestone, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gModel.Milestone) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMilestoneDo
	Assign(attrs ...field.AssignExpr) IMilestoneDo
	Joins(fields ...field.RelationField) IMilestoneDo
	Preload(fields ...field.RelationField) IMilestoneDo
	FirstOrInit() (*gModel.Milestone, error)
	FirstOrCreate() (*gModel.Milestone, error)
	FindByPage(offset int, limit int) (result []*gModel.Milestone, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMilestoneDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m milestoneDo) Debug() IMilestoneDo {
	return m.withDO(m.DO.Debug())
}

func (m milestoneDo) WithContext(ctx context.Context) IMilestoneDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m milestoneDo) ReadDB() IMilestoneDo {
	return m.Clauses(dbresolver.Read)
}

func (m milestoneDo) WriteDB() IMilestoneDo {
	return m.Clauses(dbresolver.Write)
}

func (m milestoneDo) Session(config *gorm.Session) IMilestoneDo {
	return m.withDO(m.DO.Session(config))
}

func (m milestoneDo) Clauses(conds ...clause.Expression) IMilestoneDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m milestoneDo) Returning(value interface{}, columns ...string) IMilestoneDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m milestoneDo) Not(conds ...gen.Condition) IMilestoneDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m milestoneDo) Or(conds ...gen.Condition) IMilestoneDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m milestoneDo) Select(conds ...field.Expr) IMilestoneDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m milestoneDo) Where(conds ...gen.Condition) IMilestoneDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m milestoneDo) Order(conds ...field.Expr) IMilestoneDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m milestoneDo) Distinct(cols ...field.Expr) IMilestoneDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m milestoneDo) Omit(cols ...field.Expr) IMilestoneDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m milestoneDo) Join(table schema.Tabler, on ...field.Expr) IMilestoneDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m milestoneDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMilestoneDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m milestoneDo) RightJoin(table schema.Tabler, on ...field.Expr) IMilestoneDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m milestoneDo) Group(cols ...field.Expr) IMilestoneDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m milestoneDo) Having(conds ...gen.Condition) IMilestoneDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m milestoneDo) Limit(limit int) IMilestoneDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m milestoneDo) Offset(offset int) IMilestoneDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m milestoneDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMilestoneDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m milestoneDo) Unscoped() IMilestoneDo {
	return m.withDO(m.DO.Unscoped())
}

func (m milestoneDo) Create(values ...*gModel.Milestone) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m milestoneDo) CreateInBatches(values []*gModel.Milestone, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m milestoneDo) Save(values ...*gModel.Milestone) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m milestoneDo) First() (*gModel.Milestone, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gModel.Milestone), nil
	}
}

func (m milestoneDo) Take() (*gModel.Milestone, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gModel.Milestone), nil
	}
}

func (m milestoneDo) Last() (*gModel.Milestone, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gModel.Milestone), nil
	}
}

func (m milestoneDo) Find() ([]*gModel.Milestone, error) {
	result, err := m.DO.Find()
	return result.([]*gModel.Milestone), err
}

func (m milestoneDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gModel.Milestone, err error) {
	buf := make([]*gModel.Milestone, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m milestoneDo) FindInBatches(result *[]*gModel.Milestone, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m milestoneDo) Attrs(attrs ...field.AssignExpr) IMilestoneDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m milestoneDo) Assign(attrs ...field.AssignExpr) IMilestoneDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m milestoneDo) Joins(fields ...field.RelationField) IMilestoneDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m milestoneDo) Preload(fields ...field.RelationField) IMilestoneDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m milestoneDo) FirstOrInit() (*gModel.Milestone, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gModel.Milestone), nil
	}
}

func (m milestoneDo) FirstOrCreate() (*gModel.Milestone, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gModel.Milestone), nil
	}
}

func (m milestoneDo) FindByPage(offset int, limit int) (result []*gModel.Milestone, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m milestoneDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m milestoneDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m milestoneDo) Delete(models ...*gModel.Milestone) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *milestoneDo) withDO(do gen.Dao) *milestoneDo {
	m.DO = *do.(*gen.DO)
	return m
}
